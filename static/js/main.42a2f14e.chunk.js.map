{"version":3,"sources":["Enums/OperationType.tsx","CalculatorButton.tsx","OperationButton.tsx","Calculator.tsx","CalculatorButtons.tsx","CurrentNumberDisplay.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["OperationType","CalculatorButton","props","EqualsButton","state","this","ButtonPressedCallback","myNumber","Button","className","onClick","OnClick","variant","DisplayNumber","React","OperationToText","op","Add","Subtract","Multiply","Divide","StateChart","OperationButton","myOperationType","DisplayString","CalculatorButtons","OperationPressedCallback","Clear","colSpan","CurrentNumberDisplay","displayString","Calculator","OnNumberButtonPressed","bind","OnOperationButtonPressed","computeResult","operand1","operand1Text","operand2","operand2Text","result","Operation","None","CurrentState","FirstOperand","buttonPressed","Result","setState","toString","SecondOperand","Error","process","console","log","operation","Equals","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.42a2f14e.chunk.js","sourcesContent":["export enum OperationType {\r\n  Add = 0,\r\n  Subtract,\r\n  Multiply,\r\n  Divide,\r\n  Equals,\r\n  Clear,\r\n  None,\r\n}\r\n\r\nexport function OperationToText(op: OperationType): string {\r\n  switch (op) {\r\n    case OperationType.Add:\r\n      return \"➕\";\r\n    case OperationType.Subtract:\r\n      return \"➖\";\r\n    case OperationType.Multiply:\r\n      return \"✖\";\r\n    case OperationType.Divide:\r\n      return \"➗\";\r\n    default:\r\n      return \"\";\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nexport interface CalculatorButtonProps {\r\n  myNumber: number;\r\n  DisplayNumber: string;\r\n  ButtonPressedCallback: (num: number) => void;\r\n}\r\n\r\nexport interface CalculatorButtonState {}\r\n\r\nexport class CalculatorButton extends React.Component<\r\n  CalculatorButtonProps,\r\n  CalculatorButtonState\r\n> {\r\n  public EqualsButton = -1;\r\n\r\n  constructor(props: CalculatorButtonProps) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  OnClick() {\r\n    this.props.ButtonPressedCallback(this.props.myNumber);\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <Button\r\n        className=\"CalculatorButton\"\r\n        onClick={() => this.OnClick()}\r\n        variant=\"dark\"\r\n      >\r\n        {this.props.DisplayNumber}\r\n      </Button>\r\n    );\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { OperationType } from \"./Enums/OperationType\";\r\n\r\nexport interface OperationButtonProps {\r\n  DisplayString: string;\r\n  myOperationType: OperationType;\r\n  ButtonPressedCallback: (num: number) => void;\r\n}\r\n\r\nexport interface OperationButtonState {}\r\n\r\nexport class OperationButton extends React.Component<\r\n  OperationButtonProps,\r\n  OperationButtonState\r\n> {\r\n  public EqualsButton = -1;\r\n\r\n  constructor(props: OperationButtonProps) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  OnClick() {\r\n    this.props.ButtonPressedCallback(this.props.myOperationType);\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <Button\r\n        className=\"CalculatorButton\"\r\n        onClick={() => this.OnClick()}\r\n        variant=\"dark\"\r\n      >\r\n        {this.props.DisplayString}\r\n      </Button>\r\n    );\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport CalculatorButtons from \"./CalculatorButtons\";\r\nimport CurrentNumberDisplay from \"./CurrentNumberDisplay\";\r\nimport { OperationType, OperationToText } from \"./Enums/OperationType\";\r\nimport { OperationButton } from \"./OperationButton\";\r\n\r\nexport interface IAppProps {}\r\n\r\nexport interface IAppState {\r\n  operand1: number;\r\n  operand1Text: string;\r\n  operand2: number;\r\n  operand2Text: string;\r\n  result: string;\r\n  Operation: OperationType;\r\n  CurrentState: StateChart;\r\n}\r\n\r\nenum StateChart {\r\n  FirstOperand,\r\n  SecondOperand,\r\n  Result,\r\n}\r\n\r\nexport default class Calculator extends React.Component<IAppProps, IAppState> {\r\n  constructor(props: IAppProps) {\r\n    super(props);\r\n    this.OnNumberButtonPressed = this.OnNumberButtonPressed.bind(this);\r\n    this.OnOperationButtonPressed = this.OnOperationButtonPressed.bind(this);\r\n    this.computeResult = this.computeResult.bind(this);\r\n    this.state = {\r\n      operand1: 0,\r\n      operand1Text: \"\",\r\n      operand2: 0,\r\n      operand2Text: \"\",\r\n      result: \"\",\r\n      Operation: OperationType.None,\r\n      CurrentState: StateChart.FirstOperand,\r\n    };\r\n  }\r\n\r\n  private OnNumberButtonPressed(buttonPressed: number) {\r\n    if (process.env.NODE_ENV === \"development\") {\r\n      console.log(\"Number: \" + buttonPressed.toString());\r\n    }\r\n\r\n    if (this.state.CurrentState === StateChart.Result) {\r\n      this.setState((state) => {\r\n        return {\r\n          operand1: buttonPressed,\r\n          operand1Text: buttonPressed.toString(),\r\n          operand2: 0,\r\n          operand2Text: \"\",\r\n          result: \"\",\r\n          Operation: OperationType.None,\r\n          CurrentState: StateChart.FirstOperand,\r\n        };\r\n      });\r\n    } else if (this.state.CurrentState === StateChart.FirstOperand) {\r\n      this.setState((state) => {\r\n        return {\r\n          operand1Text: state.operand1Text + buttonPressed.toString(),\r\n          operand1: +(state.operand1Text + buttonPressed.toString()),\r\n        };\r\n      });\r\n    } else if (this.state.CurrentState === StateChart.SecondOperand) {\r\n      this.setState((state) => {\r\n        return {\r\n          operand2Text: state.operand2Text + buttonPressed.toString(),\r\n          operand2: +(state.operand2Text + buttonPressed.toString()),\r\n        };\r\n      });\r\n    } else {\r\n      throw new Error(\"Unknown state '\" + StateChart[this.state.CurrentState]);\r\n    }\r\n  }\r\n\r\n  private computeResult() {\r\n    switch (this.state.Operation) {\r\n      case OperationType.Add:\r\n        if (process.env.NODE_ENV === \"development\") {\r\n          console.log(\r\n            \"Computing result ADD \" +\r\n              this.state.operand1.toString() +\r\n              \" \" +\r\n              this.state.operand2.toString() +\r\n              \" \" +\r\n              (this.state.operand1 + this.state.operand2).toString()\r\n          );\r\n        }\r\n        this.setState({\r\n          result: (this.state.operand1 + this.state.operand2).toString(),\r\n        });\r\n        break;\r\n\r\n      case OperationType.Subtract:\r\n        this.setState({\r\n          result: (this.state.operand1 - this.state.operand2).toString(),\r\n        });\r\n        break;\r\n\r\n      case OperationType.Multiply:\r\n        this.setState({\r\n          result: (this.state.operand1 * this.state.operand2).toString(),\r\n        });\r\n        break;\r\n\r\n      case OperationType.Divide:\r\n        this.setState({\r\n          result: (this.state.operand1 / this.state.operand2).toString(),\r\n        });\r\n        break;\r\n\r\n      default:\r\n        console.log(\"Unhandled state\");\r\n        break;\r\n    }\r\n  }\r\n\r\n  private OnOperationButtonPressed(operation: OperationType) {\r\n    if (process.env.NODE_ENV === \"development\") {\r\n      console.log(\"Operation: \" + OperationType[operation]);\r\n    }\r\n    switch (operation) {\r\n      case OperationType.Equals: {\r\n        // Only do something if we're on the second operand\r\n        if (this.state.CurrentState === StateChart.SecondOperand) {\r\n          this.computeResult();\r\n          this.setState({\r\n            CurrentState: StateChart.Result,\r\n          });\r\n        }\r\n        break;\r\n      }\r\n      case OperationType.Clear: {\r\n        this.setState({\r\n          operand1: 0,\r\n          operand1Text: \"\",\r\n          operand2: 0,\r\n          operand2Text: \"\",\r\n          Operation: OperationType.None,\r\n          CurrentState: StateChart.FirstOperand,\r\n        });\r\n        break;\r\n      }\r\n      default: {\r\n        this.setState({\r\n          Operation: operation,\r\n          CurrentState: StateChart.SecondOperand,\r\n          operand2: 0,\r\n          operand2Text: \"\",\r\n        });\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div className=\"Calculator\">\r\n        <CurrentNumberDisplay\r\n          displayString={\r\n            this.state.operand1Text +\r\n            \" \" +\r\n            OperationToText(this.state.Operation) +\r\n            \" \" +\r\n            this.state.operand2Text +\r\n            (this.state.CurrentState === StateChart.Result\r\n              ? \" = \" + this.state.result\r\n              : \"\")\r\n          }\r\n        />\r\n        <CurrentNumberDisplay\r\n          displayString={\r\n            this.state.CurrentState === StateChart.FirstOperand // If we're on the first operand\r\n              ? this.state.operand1Text // Show the first operand\r\n              : this.state.CurrentState === StateChart.SecondOperand &&\r\n                this.state.operand2Text === \"\" // If we're on the second operand, and we have no number\r\n              ? OperationToText(this.state.Operation) // Show the Operation\r\n              : this.state.operand2Text // Otherwise, show the second operand\r\n          }\r\n        />\r\n        <CalculatorButtons\r\n          ButtonPressedCallback={this.OnNumberButtonPressed}\r\n          OperationPressedCallback={this.OnOperationButtonPressed}\r\n        />\r\n        <p></p>\r\n        <OperationButton\r\n          ButtonPressedCallback={this.OnOperationButtonPressed}\r\n          myOperationType={OperationType.Equals}\r\n          DisplayString=\"Calculate\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport { CalculatorButton } from \"./CalculatorButton\";\r\nimport { OperationType } from \"./Enums/OperationType\";\r\nimport { OperationButton } from \"./OperationButton\";\r\n\r\nexport interface ICalculatorButtonsProps {\r\n  ButtonPressedCallback: (num: number) => void;\r\n  OperationPressedCallback: (op: OperationType) => void;\r\n}\r\n\r\nexport interface ICalculatorButtonsState {}\r\n\r\nexport default class CalculatorButtons extends React.Component<\r\n  ICalculatorButtonsProps,\r\n  ICalculatorButtonsState\r\n> {\r\n  constructor(props: ICalculatorButtonsProps) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <table className=\"CalculatorButtons\">\r\n        <tbody>\r\n          <tr>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td>\r\n              <OperationButton\r\n                ButtonPressedCallback={this.props.OperationPressedCallback}\r\n                DisplayString=\"🆑\"\r\n                myOperationType={OperationType.Clear}\r\n              />\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>\r\n              <CalculatorButton\r\n                myNumber={1}\r\n                DisplayNumber=\"1\"\r\n                ButtonPressedCallback={this.props.ButtonPressedCallback}\r\n              />\r\n            </td>\r\n            <td>\r\n              <CalculatorButton\r\n                myNumber={2}\r\n                DisplayNumber=\"2\"\r\n                ButtonPressedCallback={this.props.ButtonPressedCallback}\r\n              />\r\n            </td>\r\n            <td>\r\n              <CalculatorButton\r\n                myNumber={3}\r\n                DisplayNumber=\"3\"\r\n                ButtonPressedCallback={this.props.ButtonPressedCallback}\r\n              />\r\n            </td>\r\n            <td>\r\n              <OperationButton\r\n                DisplayString=\"➕\"\r\n                myOperationType={OperationType.Add}\r\n                ButtonPressedCallback={this.props.OperationPressedCallback}\r\n              />\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>\r\n              <CalculatorButton\r\n                myNumber={4}\r\n                DisplayNumber=\"4\"\r\n                ButtonPressedCallback={this.props.ButtonPressedCallback}\r\n              />\r\n            </td>\r\n            <td>\r\n              <CalculatorButton\r\n                myNumber={5}\r\n                DisplayNumber=\"5\"\r\n                ButtonPressedCallback={this.props.ButtonPressedCallback}\r\n              />\r\n            </td>\r\n            <td>\r\n              <CalculatorButton\r\n                myNumber={6}\r\n                DisplayNumber=\"6\"\r\n                ButtonPressedCallback={this.props.ButtonPressedCallback}\r\n              />\r\n            </td>\r\n            <td>\r\n              <OperationButton\r\n                DisplayString=\"➖\"\r\n                myOperationType={OperationType.Subtract}\r\n                ButtonPressedCallback={this.props.OperationPressedCallback}\r\n              />\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>\r\n              <CalculatorButton\r\n                myNumber={7}\r\n                DisplayNumber=\"7\"\r\n                ButtonPressedCallback={this.props.ButtonPressedCallback}\r\n              />\r\n            </td>\r\n            <td>\r\n              <CalculatorButton\r\n                myNumber={8}\r\n                DisplayNumber=\"8\"\r\n                ButtonPressedCallback={this.props.ButtonPressedCallback}\r\n              />\r\n            </td>\r\n            <td>\r\n              <CalculatorButton\r\n                myNumber={9}\r\n                DisplayNumber=\"9\"\r\n                ButtonPressedCallback={this.props.ButtonPressedCallback}\r\n              />\r\n            </td>\r\n            <td>\r\n              <OperationButton\r\n                DisplayString=\"✖\"\r\n                myOperationType={OperationType.Multiply}\r\n                ButtonPressedCallback={this.props.OperationPressedCallback}\r\n              />\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td colSpan={3}>\r\n              <CalculatorButton\r\n                myNumber={0}\r\n                DisplayNumber=\"0\"\r\n                ButtonPressedCallback={this.props.ButtonPressedCallback}\r\n              />\r\n            </td>\r\n            <td>\r\n              <OperationButton\r\n                DisplayString=\"➗\"\r\n                myOperationType={OperationType.Divide}\r\n                ButtonPressedCallback={this.props.OperationPressedCallback}\r\n              />\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    );\r\n    /*\r\n    \r\n    */\r\n  }\r\n}\r\n","import * as React from \"react\";\r\n\r\nexport interface ICurrentNumberDisplayProps {\r\n  displayString: string;\r\n}\r\n\r\nexport interface ICalculatorDisplayState {}\r\n\r\nexport default class CurrentNumberDisplay extends React.Component<\r\n  ICurrentNumberDisplayProps,\r\n  ICalculatorDisplayState\r\n> {\r\n  constructor(props: ICurrentNumberDisplayProps) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n  }\r\n\r\n  public render() {\r\n    return <div className=\"CalculatorDisplay\">{this.props.displayString}</div>;\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Calculator from \"./Calculator\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"TitleBar\">My Calculator App</h1>\n      <Calculator></Calculator>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}